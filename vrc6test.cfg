MEMORY {
    # The NES CPU has 2 KiB of RAM in eight 256-byte pages. The first page is
    # called the zero page as the first byte of its addresses are alway $00.
    # There are special instructions for dealing with zero page RAM that are
    # faster than those that operate on the other pages, as the first byte of
    # the address is implicit.
    ZP: start = $28, size = $d8;

    # We'll use page one for the C stack and page two for OAM. Since we're not
    # using OAM in this lesson we won't define a memory section for it.

    # We'll use the last five pages for general RAM.
	RAM: start = $0300, size = $0500, define = yes;

    # We'll put a 16-byte iNES header at the beginning of our ROM.
    # This is used by emulators to determine which hardware to emulate.
    HEADER: start = $0, size = $10, file = %O, fill = yes;

    # We'll use a simple NROM cartridge with 16KiB of PRG ROM.
    # The 16KiB ROM bank is mapped to CPU addresses $8000-$bfff (and mirrored
    # to CPU addresses $c000-$ffff). Notice we're setting it's size to $3ffa,
    # which is actually 6 bytes less than 16KiB ($4000). This is to leave room
    # for the three 2-byte interrupt vector addresses at the end of the ROM.
    PRG0: start = $8000, size = $4000, file = %O, fill = yes;
    PRG1: start = $8000, size = $4000, file = %O, fill = yes;
    PRG2: start = $8000, size = $4000, file = %O, fill = yes;
    PRG3: start = $8000, size = $4000, file = %O, fill = yes;
    
    PRG4: start = $8000, size = $4000, file = %O, fill = yes;
    PRG5: start = $8000, size = $4000, file = %O, fill = yes;
    PRG6: start = $8000, size = $4000, file = %O, fill = yes;
    PRG7: start = $8000, size = $4000, file = %O, fill = yes;
    
    PRG8: start = $8000, size = $4000, file = %O, fill = yes;
    PRG9: start = $8000, size = $4000, file = %O, fill = yes;
    PRGa: start = $8000, size = $4000, file = %O, fill = yes;
    PRGb: start = $8000, size = $4000, file = %O, fill = yes;
    
    PRGc: start = $8000, size = $4000, file = %O, fill = yes;
    PRGd: start = $8000, size = $4000, file = %O, fill = yes;
    PRGe: start = $8000, size = $4000, file = %O, fill = yes;
    PRGf1: start = $C000, size = $2000, file = %O, fill = yes;
	PRGf2: start = $E000, size = $1ffa, file = %O, fill = yes;
	
    # The CPU expects interrupt vectors at fixed addresses:
    # $fffa-$fffb NMI vector
    # $fffc-$fffd Reset vector
    # $fffe-$ffff IRQ vector
    VECTORS: start = $fffa, size = $6, file = %O, fill = yes;

    # We'll use a simple NROM cartridge with one 8 KiB bank of CHR ROM.
    CHR: start = $0000, size = $2000, file = %O, fill = yes;
}

SEGMENTS {
    # iNES header at beginning of file
    HEADER:   load = HEADER,         type = ro;

    # PRG ROM
	CODE0:    load = PRG0,           type = ro,  define = yes;
	CODE1:    load = PRG1,           type = ro,  define = yes;
	CODE2:    load = PRG2,           type = ro,  define = yes;
	CODE3:    load = PRG3,           type = ro,  define = yes;
	CODE4:    load = PRG4,           type = ro,  define = yes;
	CODE5:    load = PRG5,           type = ro,  define = yes;
	CODE6:    load = PRG6,           type = ro,  define = yes;
	CODE7:    load = PRG7,           type = ro,  define = yes;
	CODE8:    load = PRG9,           type = ro,  define = yes;
	CODEa:    load = PRGa,           type = ro,  define = yes;
	CODEb:    load = PRGb,           type = ro,  define = yes;
	CODEc:    load = PRGc,           type = ro,  define = yes;
	CODEd:    load = PRGd,           type = ro,  define = yes;
	CODEe:    load = PRGe,           type = ro,  define = yes;
	CODEf:    load = PRGf1,           type = ro,  define = yes;
	STARTUP:  load = PRGf2,           type = ro,  define = yes;
	CODE:     load = PRGf2,           type = ro,  define = yes;
    RODATA:   load = PRGf2,            type = ro,  define = yes;
    DATA:     load = PRGf2, run = RAM, type = rw,  define = yes;
    VECTORS:  load = VECTORS,        type = ro;

    # CHR ROM
    CHARS:    load = CHR,            type = ro;

    # CPU RAM
    ZEROPAGE:  load = ZP,             type = zp;
    BSS:       load = RAM,            type = bss, define = yes;
    
    
}

